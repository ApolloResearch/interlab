name: CI and CD

on:
  push:
    branches: [main]
    tags:
      - "v*.*.*"
  pull_request:

jobs:
  ci:
    name: CI and CD
    runs-on: ubuntu-latest
    steps:
      - name: Check out the source
        uses: actions/checkout@v2

      # If you wanted to use multiple Python versions, you'd have specify a matrix in the job and
      # reference the matrixe python version here.
      - name: Setup python version
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Cache poetry and entire .local
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: "poetry-1.5.1"

      # The key configuration value here is `virtualenvs-in-project: true`: this creates the
      # venv as a `.venv` in your testing directory, which allows the next step to easily
      # cache it.
      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.5.1"
          virtualenvs-create: true
          virtualenvs-in-project: true

      # Cache your dependencies (i.e. all the stuff in your `pyproject.toml`). Note the cache
      # key: if you're using multiple Python versions, or multiple OSes, you'd need to include
      # them in the cache key. I'm not, so it can be simple and just depend on the poetry.lock.
      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}

      # Install dependencies. `--no-root` means "install all dependencies but not the project
      # itself", which is what you want to avoid caching _your_ code. The `if` statement
      # ensures this only runs on a cache miss.
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
        if: steps.cache-deps.outputs.cache-hit != 'true'

      - name: Install the package
        run: poetry install --no-interaction
  
      - name: Run pytest
        run: poetry run pytest

      - name: Check style
        run: poetry run bash scripts/format.sh --check

      - name: Check requirements*.txt to be up to date
        run: poetry run bash scripts/requirements.sh --check

      # Always build (should not fail, and used in release job below)
      - name: Build poetry artifacts
        run: |
          poetry build --no-interaction

      - name: Check version tag
        id: check-tag
        run: |
          if [[ ${{ github.event.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "release=true" >> $GITHUB_OUTPUT
            echo "Detected version release tag"
          fi

      - name: GH release on version tag
        if: steps.check-tag.outputs.release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: |
            dist/interlab-${{env.PROJECT_VERSION}}-*.whl
            dist/interlab-${{env.PROJECT_VERSION}}.tar.gz
   